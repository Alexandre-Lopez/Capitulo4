Index: src/Criba.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.Scanner;\r\n\r\npublic class Criba {\r\n    public static void main(String[] args) {\r\n        int max = solicitarNumeroMaximo(); // Solicita el número máximo para la criba\r\n        imprimirVectorInicial(max); // Imprime el vector inicial de números hasta el número máximo\r\n        int[] primos = generarVectorPrimos(max); // Genera un vector con los números primos hasta el número máximo\r\n        imprimirVectorPrimos(max, primos); // Imprime el vector de números primos\r\n    }\r\n\r\n    private static int[] generarVectorPrimos(int max) {\r\n        if (max < 2) {\r\n            return new int[0];\r\n        }\r\n\r\n        boolean[] esPrimo = new boolean[max + 1];\r\n        inicializarEsPrimo(esPrimo); // Inicializa el vector de booleanos que representa los números primos\r\n        aplicarCriba(esPrimo, max + 1); // Realiza la criba de Eratóstenes\r\n        return encontrarNumerosPrimos(esPrimo); // Devuelve un vector con los números primos\r\n    }\r\n\r\n    private static void inicializarEsPrimo(boolean[] esPrimo) {\r\n        for (int i = 2; i < esPrimo.length; i++) {\r\n            esPrimo[i] = true;\r\n        }\r\n        esPrimo[0] = false;\r\n        esPrimo[1] = false;\r\n    }\r\n\r\n    /* En este método se ha modificado la condición del primer bucle for, sustituyendo \"Math.sqrt(dim) + 1\"\r\n    por \"i * i < dim\". Esta modificación se realiza para mejorar el rendimiento del programa,\r\n    ya que calcular la raíz cuadrada de un número es más costoso computacionalmente que multiplicar un número por sí mismo.\r\n    También se ha modificado el segundo bucle for, cambiando el valor inicial de j en el bucle interno para comenzar\r\n    en \"i * i\" en lugar de \"2 * i\", lo que nos permite evitar duplicar el trabajo al eliminar los múltiplos de números\r\n    menores a \"i\"*/\r\n    private static void aplicarCriba(boolean[] esPrimo, int dim) {\r\n        for (int i = 2; i * i < dim; i++) {\r\n            if (esPrimo[i]) {\r\n                for (int j = i * i; j < dim; j += i) {\r\n                    esPrimo[j] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static int[] encontrarNumerosPrimos(boolean[] esPrimo) {\r\n        int cuenta = 0;\r\n        for (boolean esPrimoActual : esPrimo) {\r\n            if (esPrimoActual) {\r\n                cuenta++;\r\n            }\r\n        }\r\n\r\n        int[] primos = new int[cuenta];\r\n        for (int i = 0, j = 0; i < esPrimo.length; i++) {\r\n            if (esPrimo[i]) {\r\n                primos[j++] = i;\r\n            }\r\n        }\r\n\r\n        return primos;\r\n    }\r\n\r\n    private static int solicitarNumeroMaximo() {\r\n        Scanner teclado = new Scanner(System.in);\r\n        System.out.println(\"Introduce el número para la criba de Erastótenes:\");\r\n        return teclado.nextInt();\r\n    }\r\n\r\n    /* Se ha utilizado un StringBuilder en los métodos de \"imprimirVectorInicial\" y \"imprimirVectorPrimos\" en lugar de\r\n    la concatenación de cadenas porque el proceso de concatenación de cadenas es ineficiente y puede afectar\r\n    negativamente el rendimiento, ya que crea objetos String nuevos en memoria cada vez que se concatenan dos cadenas.\r\n    En cambio, el StringBuilder crea un objeto mutable que permite la adición de cadenas sin crear un nuevo objeto cada\r\n    vez, lo que mejora el rendimiento y la eficiencia de la aplicación. */\r\n    private static void imprimirVectorInicial(int max) {\r\n        StringBuilder vectorInicial = new StringBuilder(\"\\nVector inicial hasta: \" + max + \"\\n\");\r\n        for (int i = 1; i <= max; i++) {\r\n            vectorInicial.append(i).append(\"\\t\");\r\n            if (i % 10 == 0) {\r\n                vectorInicial.append(\"\\n\");\r\n            }\r\n        }\r\n        System.out.println(vectorInicial);\r\n    }\r\n\r\n    private static void imprimirVectorPrimos(int max, int[] primos) {\r\n        StringBuilder vectorPrimos = new StringBuilder(\"\\nVector de primos hasta: \" + max + \"\\n\");\r\n        for (int i = 0; i < primos.length; i++) {\r\n            vectorPrimos.append(primos[i]).append(\"\\t\");\r\n            if ((i + 1) % 10 == 0) {\r\n                vectorPrimos.append(\"\\n\");\r\n            }\r\n        }\r\n        System.out.println(vectorPrimos);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Criba.java b/src/Criba.java
--- a/src/Criba.java	(revision 8062a1d80fefac796ab4b0f1055b73ae6d191f1f)
+++ b/src/Criba.java	(date 1677006451518)
@@ -1,24 +1,50 @@
 import java.util.Scanner;
 
+/**
+ * Clase que genera todos los números primos de 1 hasta un número máximo especificado por el usuario utilizando el algoritmo
+ * de la criba de Eratóstenes
+ *
+ * @author Alexandre Lopez Sanchez
+ * @version 2.0
+ */
 public class Criba {
+    /**
+     * Método main de la clase Criba
+     *
+     * @param args
+     */
     public static void main(String[] args) {
-        int max = solicitarNumeroMaximo(); // Solicita el número máximo para la criba
-        imprimirVectorInicial(max); // Imprime el vector inicial de números hasta el número máximo
-        int[] primos = generarVectorPrimos(max); // Genera un vector con los números primos hasta el número máximo
-        imprimirVectorPrimos(max, primos); // Imprime el vector de números primos
+        int max = solicitarNumeroMaximo();
+        imprimirVectorInicial(max);
+        int[] primos = generarVectorPrimos(max);
+        imprimirVectorPrimos(max, primos);
     }
 
+    /**
+     * Método que genera un vector con todos los números primos desde 2 hasta el número máximo especificado.
+     * Si el número máximo es menor que 2, el método devuelve un vector vacío.
+     *
+     * @param max El número máximo hasta el cual se generan los números primos
+     * @return Un vector de enteros que contiene todos los números primos entre 2 y el número máximo (inclusive),
+     * o un vector vacío si el número máximo es menor que 2.
+     */
     private static int[] generarVectorPrimos(int max) {
         if (max < 2) {
             return new int[0];
         }
 
         boolean[] esPrimo = new boolean[max + 1];
-        inicializarEsPrimo(esPrimo); // Inicializa el vector de booleanos que representa los números primos
-        aplicarCriba(esPrimo, max + 1); // Realiza la criba de Eratóstenes
-        return encontrarNumerosPrimos(esPrimo); // Devuelve un vector con los números primos
+        inicializarEsPrimo(esPrimo);
+        aplicarCriba(esPrimo, max + 1);
+        return encontrarNumerosPrimos(esPrimo);
     }
 
+    /**
+     * Método que inicializa el vector de primos "esPrimo" con el valor "true" para las posiciones mayores a 1,
+     * y con el valor "false" para las posiciones 0 y 1
+     *
+     * @param esPrimo Vector de booleanos que indica si cada número hasta una dimensión dada es primo o no
+     */
     private static void inicializarEsPrimo(boolean[] esPrimo) {
         for (int i = 2; i < esPrimo.length; i++) {
             esPrimo[i] = true;
@@ -27,12 +53,13 @@
         esPrimo[1] = false;
     }
 
-    /* En este método se ha modificado la condición del primer bucle for, sustituyendo "Math.sqrt(dim) + 1"
-    por "i * i < dim". Esta modificación se realiza para mejorar el rendimiento del programa,
-    ya que calcular la raíz cuadrada de un número es más costoso computacionalmente que multiplicar un número por sí mismo.
-    También se ha modificado el segundo bucle for, cambiando el valor inicial de j en el bucle interno para comenzar
-    en "i * i" en lugar de "2 * i", lo que nos permite evitar duplicar el trabajo al eliminar los múltiplos de números
-    menores a "i"*/
+    /**
+     * Método que implementa el algoritmo de la criba de Eratóstenes para identificar qué números hasta un valor máximo
+     * proporcionado por el usuario son primos y cuáles no lo son
+     *
+     * @param esPrimo Vector de booleanos que indica si cada número hasta una dimensión dada es primo o no
+     * @param dim Tamaño del vector
+     */
     private static void aplicarCriba(boolean[] esPrimo, int dim) {
         for (int i = 2; i * i < dim; i++) {
             if (esPrimo[i]) {
@@ -43,6 +70,12 @@
         }
     }
 
+    /**
+     * Método que devuelve un vector que contiene todos los números primos encontrados en el vector de booleanos que se le pasa como parámetro
+     *
+     * @param esPrimo Vector de booleanos que indica si cada número hasta una dimensión dada es primo o no
+     * @return Vector de enteros que contiene todos los números primos encontrados en el vector de booleanos
+     */
     private static int[] encontrarNumerosPrimos(boolean[] esPrimo) {
         int cuenta = 0;
         for (boolean esPrimoActual : esPrimo) {
@@ -61,17 +94,22 @@
         return primos;
     }
 
+    /**
+     * Método que solicita al usuario un número máximo para aplicar la criba de Erastótenes
+     *
+     * @return El número máximo ingresado por el usuario
+     */
     private static int solicitarNumeroMaximo() {
         Scanner teclado = new Scanner(System.in);
         System.out.println("Introduce el número para la criba de Erastótenes:");
         return teclado.nextInt();
     }
 
-    /* Se ha utilizado un StringBuilder en los métodos de "imprimirVectorInicial" y "imprimirVectorPrimos" en lugar de
-    la concatenación de cadenas porque el proceso de concatenación de cadenas es ineficiente y puede afectar
-    negativamente el rendimiento, ya que crea objetos String nuevos en memoria cada vez que se concatenan dos cadenas.
-    En cambio, el StringBuilder crea un objeto mutable que permite la adición de cadenas sin crear un nuevo objeto cada
-    vez, lo que mejora el rendimiento y la eficiencia de la aplicación. */
+    /**
+     * Método que imprime el vector inicial hasta el número máximo especificado.
+     *
+     * @param max Número que el usuario a introducido por teclado
+     */
     private static void imprimirVectorInicial(int max) {
         StringBuilder vectorInicial = new StringBuilder("\nVector inicial hasta: " + max + "\n");
         for (int i = 1; i <= max; i++) {
@@ -83,6 +121,12 @@
         System.out.println(vectorInicial);
     }
 
+    /**
+     * Método que imprime el vector de números primos hasta el número máximo especificado.
+     *
+     * @param max Número que el usuario a introducido por teclado
+     * @param primos Vector de enteros que contiene todos los números primos encontrados en el vector de booleanos esPrimo
+     */
     private static void imprimirVectorPrimos(int max, int[] primos) {
         StringBuilder vectorPrimos = new StringBuilder("\nVector de primos hasta: " + max + "\n");
         for (int i = 0; i < primos.length; i++) {
@@ -93,4 +137,4 @@
         }
         System.out.println(vectorPrimos);
     }
-}
+}
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"2c9519bf-a188-4e30-ae28-2aee7a5abfae\" name=\"Changes\" comment=\"Programa refactorizado\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Criba.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Criba.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"Documentado_con_JavaDoc\" />\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2M0kngSqlKesDPRJehSJNHGYcs4\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"extract.method.default.visibility\": \"private\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.0\",\r\n    \"run.code.analysis.last.selected.profile\": \"pProject Default\",\r\n    \"settings.editor.selected.configurable\": \"org.jetbrains.plugins.github.ui.GithubSettingsConfigurable\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"Criba\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"Criba\" />\r\n      <module name=\"Tema 4\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Criba\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"2c9519bf-a188-4e30-ae28-2aee7a5abfae\" name=\"Changes\" comment=\"\" />\r\n      <created>1676912060346</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1676912060346</updated>\r\n      <workItem from=\"1676912063586\" duration=\"632000\" />\r\n      <workItem from=\"1676912728981\" duration=\"25783000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Programa original\">\r\n      <created>1676912179997</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676912179997</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Programa refactorizado\">\r\n      <created>1676930280468</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676930280468</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Programa refactorizado\">\r\n      <created>1676991522683</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1676991522683</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"Documentado_con_JavaDoc\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Programa original\" />\r\n    <MESSAGE value=\"Programa refactorizado\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Programa refactorizado\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 8062a1d80fefac796ab4b0f1055b73ae6d191f1f)
+++ b/.idea/workspace.xml	(date 1677006122324)
@@ -18,6 +18,19 @@
     </option>
   </component>
   <component name="Git.Settings">
+    <excluded-from-favorite>
+      <branch-storage>
+        <map>
+          <entry type="REMOTE">
+            <value>
+              <list>
+                <branch-info repo="$PROJECT_DIR$" source="origin/master" />
+              </list>
+            </value>
+          </entry>
+        </map>
+      </branch-storage>
+    </excluded-from-favorite>
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
         <entry key="$PROJECT_DIR$" value="Documentado_con_JavaDoc" />
@@ -69,7 +82,7 @@
       <option name="presentableId" value="Default" />
       <updated>1676912060346</updated>
       <workItem from="1676912063586" duration="632000" />
-      <workItem from="1676912728981" duration="25783000" />
+      <workItem from="1676912728981" duration="35276000" />
     </task>
     <task id="LOCAL-00001" summary="Programa original">
       <created>1676912179997</created>
@@ -92,7 +105,14 @@
       <option name="project" value="LOCAL" />
       <updated>1676991522683</updated>
     </task>
-    <option name="localTasksCounter" value="4" />
+    <task id="LOCAL-00004" summary="Programa refactorizado">
+      <created>1676993866339</created>
+      <option name="number" value="00004" />
+      <option name="presentableId" value="LOCAL-00004" />
+      <option name="project" value="LOCAL" />
+      <updated>1676993866339</updated>
+    </task>
+    <option name="localTasksCounter" value="5" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -109,13 +129,33 @@
                   <entry key="branch">
                     <value>
                       <list>
-                        <option value="Documentado_con_JavaDoc" />
+                        <option value="origin/Documentado_con_JavaDoc" />
                       </list>
                     </value>
                   </entry>
                 </map>
               </option>
             </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+    <option name="RECENT_FILTERS">
+      <map>
+        <entry key="Branch">
+          <value>
+            <list>
+              <RecentGroup>
+                <option name="FILTER_VALUES">
+                  <option value="origin/Documentado_con_JavaDoc" />
+                </option>
+              </RecentGroup>
+              <RecentGroup>
+                <option name="FILTER_VALUES">
+                  <option value="origin/refactorizar" />
+                </option>
+              </RecentGroup>
+            </list>
           </value>
         </entry>
       </map>
